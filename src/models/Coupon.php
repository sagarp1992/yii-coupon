<?php
namespace powerkernel\yiicoupon\models;
use powerkernel\yiicommon\behaviors\UTCDateTimeBehavior;
use powerkernel\yiiuser\models\User;
use Yii;
/**
 * This is the model class for Coupon.
 * @property \MongoDB\BSON\ObjectID $_id
 * @property string $name
 * @property string $description
 * @property string $user_limit 
 * @property string $coupon_code
 * @property date $start_date
 * @property date $end_date
 * @property int $max_discount_limit
 * @property string $coupon_type
 * @property date $created_by
 * @property date $updated_by
 * @property string $status
 * @property \MongoDB\BSON\UTCDateTime $created_at
 * @property \MongoDB\BSON\UTCDateTime $updated_at
 */
class Coupon extends \yii\mongodb\ActiveRecord
{

    const STATUS_ACTIVE = 'STATUS_ACTIVE';
    const STATUS_INACTIVE = 'STATUS_INACTIVE';
    public $value_str;
    public $user_limit_str;
    public $end_date_str;
    public function fields()
    {
        $fields = parent::fields();
        $fields['value_str']=function ($model) {
            if($model->coupon_type =="per"){
                return $model->value.' %';
            }else{
                return '$ '.number_format((float)$model->value,2);
            }
            return $model->value;
        };
        $fields['user_limit_str']=function ($model) {
            return $model->user_limit.' User Remaining';
        };
        return $fields;
    }
    public static function collectionName()
    {
        return 'coupon_db';
    }
    public function attributes()
    {
        return [
            '_id',
            'name',
            'description',
            'user_limit',
            'coupon_code',
            'start_date',
            'end_date',
            'max_discount_limit',
            'coupon_type',
            'value',
            'created_by',
            'updated_by',
            'created_at',
            'updated_at',
            'status'
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'description', 'user_limit','value', 'coupon_code', 'start_date','end_date','coupon_type'], 'required'],

            [['max_discount_limit'], 'is8NumbersOnly'],

            ['coupon_code', 'unique'],

            [['value'], 'number'],
            [['name'], 'string', 'max' => 20],

            [['description'], 'string', 'max' => 50],

            ['status', 'default', 'value' => self::STATUS_ACTIVE],

            [['status'], 'string', 'max' => 20],

            ['value', 'required', 'when' => function($model) {
                if($model->coupon_type == 'per'){
                    if($model->value < 100){
                        return true;
                    }else{
                        $model->addError('value', 'Discount value must be under 100%.');
                    }
                }
            }],

            [['created_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['created_by' => '_id']],

            [['updated_by'], 'exist', 'targetClass' => User::class, 'targetAttribute' => ['updated_by' => '_id']],
        ];
    }

    public function is8NumbersOnly($attribute)
    {
        
        if (!preg_match('/^[0-9]{0,10}$/', $this->$attribute)) {
            $this->addError($attribute, 'must contain exactly 10 digits.');
        }
    }

    public function behaviors()
    {
        return [
            UTCDateTimeBehavior::class,
        ];
    }
    /**
     * @inheritdoc
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created_by = (string)Yii::$app->user->id;
        }        
        // $$timestamp = $timestamp - ($timestamp % 60);
        $this->updated_by = (string)Yii::$app->user->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }
}